version: "3.3"
services:

  proxy:
    image: traefik:v2.2
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack from the env var TRAEFIK_TAG
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
    environment:
      - VIRTUAL_HOST=fair-enough.semanticscience.org
      - LETSENCRYPT_HOST=fair-enough.semanticscience.org
      - VIRTUAL_PORT=80
    labels:
      - traefik.enable=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-traefik-public-http.rule=Host(`${DOMAIN?Variable not set}`)
      - traefik.http.services.${STACK_NAME?Variable not set}-traefik-public.loadbalancer.server.port=80


  mongodb:
    image: mongo
    restart: always
    volumes:
      - mongodb-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ${SECRET_KEY-oursecretkey}
      # MONGO_INITDB_ROOT_PASSWORD: oursecretkey
      MONGO_INITDB_DATABASE: evaluations

  backend:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    depends_on:
      - mongodb
    env_file:
      - .env
    environment:
      - VIRTUAL_HOST=api.fair-enough.semanticscience.org
      - LETSENCRYPT_HOST=api.fair-enough.semanticscience.org
      - VIRTUAL_PORT=80
      - MONGODB_URL=mongodb://root:${SECRET_KEY-oursecretkey}@mongodb:27017/
    #   - SERVER_NAME=${DOMAIN?Variable not set}
    #   - SERVER_HOST=https://${DOMAIN?Variable not set}
    #   # Allow explicit env var override for tests
    #   - SMTP_HOST=${SMTP_HOST}
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`) || PathPrefix(`/graphql`)
      - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80


  frontend:
    build:
      context: ./frontend
      # args:
      #   FRONTEND_ENV: dev
    ports:
      - 5000:5000
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=PathPrefix(`/`)
      - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=5000


volumes:
  mongodb-data:

networks:
  traefik-public:
    # For local dev, don't expect an external Traefik network
    external: false

# networks:
#   traefik-public:
#     # Allow setting it to false for testing
#     external: ${TRAEFIK_PUBLIC_NETWORK_IS_EXTERNAL-true}
